/*****************************************************************************
* Filename:          D:\fpga_project\cpu\23/drivers/i2c_software_master_v1_00_a/src/i2c_software_master.h
* Version:           1.00.a
* Description:       i2c_software_master Driver Header File
* Date:              Sun Aug 12 12:02:43 2018 (by Create and Import Peripheral Wizard)
*****************************************************************************/

#ifndef I2C_SOFTWARE_MASTER_H
#define I2C_SOFTWARE_MASTER_H

/***************************** Include Files *******************************/

#include "xbasic_types.h"
#include "xstatus.h"
#include "xil_io.h"
#include "mblaze_nt_types.h"

/************************** Constant Definitions ***************************/


/**
 * User Logic Slave Space Offsets
 * -- SLV_REG0 : user logic slave module register 0
 */
#define I2C_SOFTWARE_MASTER_USER_SLV_SPACE_OFFSET (0x00000000)
#define I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET (I2C_SOFTWARE_MASTER_USER_SLV_SPACE_OFFSET + 0x00000000)

/**************************** Type Definitions *****************************/


/***************** Macros (Inline Functions) Definitions *******************/

/**
 *
 * Write a value to a I2C_SOFTWARE_MASTER register. A 32 bit write is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is written.
 *
 * @param   BaseAddress is the base address of the I2C_SOFTWARE_MASTER device.
 * @param   RegOffset is the register offset from the base to write to.
 * @param   Data is the data written to the register.
 *
 * @return  None.
 *
 * @note
 * C-style signature:
 * 	void I2C_SOFTWARE_MASTER_mWriteReg(Xuint32 BaseAddress, unsigned RegOffset, Xuint32 Data)
 *
 */
#define I2C_SOFTWARE_MASTER_mWriteReg(BaseAddress, RegOffset, Data) \
 	Xil_Out32((BaseAddress) + (RegOffset), (Xuint32)(Data))

/**
 *
 * Read a value from a I2C_SOFTWARE_MASTER register. A 32 bit read is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is read from the register. The most significant data
 * will be read as 0.
 *
 * @param   BaseAddress is the base address of the I2C_SOFTWARE_MASTER device.
 * @param   RegOffset is the register offset from the base to write to.
 *
 * @return  Data is the data from the register.
 *
 * @note
 * C-style signature:
 * 	Xuint32 I2C_SOFTWARE_MASTER_mReadReg(Xuint32 BaseAddress, unsigned RegOffset)
 *
 */
#define I2C_SOFTWARE_MASTER_mReadReg(BaseAddress, RegOffset) \
 	Xil_In32((BaseAddress) + (RegOffset))


/**
 *
 * Write/Read 32 bit value to/from I2C_SOFTWARE_MASTER user logic slave registers.
 *
 * @param   BaseAddress is the base address of the I2C_SOFTWARE_MASTER device.
 * @param   RegOffset is the offset from the slave register to write to or read from.
 * @param   Value is the data written to the register.
 *
 * @return  Data is the data from the user logic slave register.
 *
 * @note
 * C-style signature:
 * 	void I2C_SOFTWARE_MASTER_mWriteSlaveRegn(Xuint32 BaseAddress, unsigned RegOffset, Xuint32 Value)
 * 	Xuint32 I2C_SOFTWARE_MASTER_mReadSlaveRegn(Xuint32 BaseAddress, unsigned RegOffset)
 *
 */
#define I2C_SOFTWARE_MASTER_mWriteSlaveReg0(BaseAddress, RegOffset, Value) \
 	Xil_Out32((BaseAddress) + (I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET) + (RegOffset), (Xuint32)(Value))

#define I2C_SOFTWARE_MASTER_mReadSlaveReg0(BaseAddress, RegOffset) \
 	Xil_In32((BaseAddress) + (I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET) + (RegOffset))

/************************** Function Prototypes ****************************/


/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the I2C_SOFTWARE_MASTER instance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus I2C_SOFTWARE_MASTER_SelfTest(void * baseaddr_p);
unsigned char  i2c_master_write_simple(u8 slave_address,u8 slave_register,u8 slave_data);
void scl_write(boolean val);
void sda_write(boolean val);
boolean sda_read();
boolean scl_read();
void i2c_init();
boolean i2c_write(unsigned char data);
void i2c_start();
void i2c_stop();



#endif /** I2C_SOFTWARE_MASTER_H */




//	  assign sda_pin_T=(slv_reg0[31])?1:0;////if T==0 buf is connected to ouput  else is high impedance
//	  assign scl_pin_T=(slv_reg0[30])?1:0;
//
//	  assign sda_pin_O=0;
//	  assign scl_pin_O=0;
//
//	  assign slv_reg_temp[29]=sda_pin_I;
//	  assign slv_reg_temp[28]=scl_pin_I;
