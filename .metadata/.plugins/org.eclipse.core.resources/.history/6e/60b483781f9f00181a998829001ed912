#include "delay.h"
#include "i2c_software_master.h"
#include "led_k.h"
#define wait_i2c delay_ns(1000)
#define wait_i2c_k delay_ns(300)
//  assign sda_pin=(slv_reg0[31])?1'bz:0;
//  assign scl_pin=(slv_reg0[30])?1'bz:0;
//  assign slv_reg_temp[29]=sda_pin;
//  assign slv_reg_temp[28]=scl_pin;

#define i2c_base_address 0xc7c00000


int sda_last=0;
int scl_last=0;//because i didnt want to declare another register in my edk for i2c

boolean scl_read()
{
	return ((I2C_SOFTWARE_MASTER_mReadSlaveReg0(i2c_base_address,I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET)&(1<<3))&&1 );
}

boolean sda_read()
{
	return ((I2C_SOFTWARE_MASTER_mReadSlaveReg0(i2c_base_address,I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET)&(1<<2))&&1);
}
void sda_write(boolean val)
{
	u32 out=0;
	if(val)
		out=
		(scl_last<<1)|(1<<0);
	else
		out=
		((scl_last<<1)&(~(1<<0)));
	sda_last=val;

	I2C_SOFTWARE_MASTER_mWriteSlaveReg0(i2c_base_address, I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET, out);
	delay_ns(10);

}
void scl_write(boolean val)
{
	u32 out=0;
	if(val)
		out=
		(sda_last<<0)|(1<<1);
	else
		out=
		((sda_last<<0)&(~(1<<1)));
	scl_last=val;

	I2C_SOFTWARE_MASTER_mWriteSlaveReg0(i2c_base_address, I2C_SOFTWARE_MASTER_SLV_REG0_OFFSET, out);
	delay_ns(10);
}


void i2c_init()
{
	sda_write(1);
	scl_write(1);
}
unsigned char  i2c_master_write_simple(u8 slave_address,u8 slave_register,u8 slave_data)
{
	u8 status;
	boolean ack_1,ack_2,ack_3;
	ack_1=0;
	ack_2=0;
	ack_3=0;

	i2c_start();
	ack_1=i2c_write(slave_address);
	ack_2=i2c_write(slave_register);
	ack_3=i2c_write(slave_data);
	i2c_stop();
	status=((ack_1)?(1<<0):(1<<1))|((ack_2)?(1<<2):(1<<3))|((ack_3)?(1<<4):(1<<5));
	return status;
}
void i2c_start(){
	sda_write(1);
	scl_write(1);
	wait_i2c;
	sda_write(0);
	wait_i2c;
}
boolean i2c_write(unsigned char data){
	boolean ack;
	unsigned char counter_data=8;//because we avoided negative numbers
	for(;counter_data>=1;counter_data=counter_data-1)
	{
		scl_write(0);
		wait_i2c_k;
		sda_write(((data&(1<<(counter_data-1)))&&1));
		wait_i2c;
		scl_write(1);
		wait_i2c;
		while(scl_read()==0);

	}
	scl_write(0);
	wait_i2c_k;
	sda_write(1);
	wait_i2c;
	scl_write(1);
	wait_i2c;
	ack =!sda_read();//send ack-if sda==1 means nack if 1 means ack
	scl_write(0);
	wait_i2c;
	return ack;
}
void i2c_stop(){
	sda_write(0);
	wait_i2c;
	scl_write(1);
	wait_i2c_k;
	sda_write(1);
	wait_i2c;
}
unsigned char i2c_read(boolean ack){
	unsigned char counter_data=8;//because we avoided negative numbers
	unsigned char data=0;
	for(;counter_data>=1;counter_data=counter_data-1)
	{
		scl_write(0);
		wait_i2c;
		scl_write(1);
		wait_i2c;
		while(scl_read()==0);

		data|=sda_read()<<(counter_data-1);
	}
	scl_write(0);
	wait_i2c_k;

	if(ack)
		sda_write(0);
	else
		sda_write(1);
	wait_i2c;
	scl_write(1);
	wait_i2c;
	scl_write(0);
	wait_i2c;


	return data;
}

